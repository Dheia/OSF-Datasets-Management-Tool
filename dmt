#!/usr/bin/php -q

<?php

  use \StructuredDynamics\osf\php\api\ws\dataset\create\DatasetCreateQuery;
  use \StructuredDynamics\osf\php\api\ws\auth\lister\AuthListerQuery;
  use \StructuredDynamics\osf\php\api\ws\auth\registrar\access\AuthRegistrarAccessQuery;
  use \StructuredDynamics\osf\php\api\framework\CRUDPermission;
  use \StructuredDynamics\osf\framework\Namespaces;

  // Set the working directory of this script to its home directory. That way, if it is ran from elsewhere,
  // the relative paths will follow.
  chdir(dirname(realpath($argv[0])));
  
  include_once('inc/clt.php');

  /*
                                                  
    The sync.php script does manage the importation of files on the file system.
    A dataset can be composed of one or multiple files. One or multiple records are defined
    in each file.
    
    This scripts only check if a file has been modified on the file system and keep the
    index of files' states updated.
    
    Then "converters" are called by this script to perform specific conversion steps
    needed by different datasets.
  
  */

  if(PHP_SAPI != 'cli')
  {
    die('This is a shell application, so make sure to run this application in your terminal.');
  }  
  
  // Get commandline options
  $arguments = getopt('e::l::d::n::h::s::c:', array('help::', 
                                                    'osf-web-services::', 
                                                    'delete::', 
                                                    'uri::', 
                                                    'creator::',
                                                    'group::',
                                                    'title::',    
                                                    'description::',
                                                    'queryextension::',
                                                    'config-id::',
                                                    'mime::',
                                                    'file::'));  
  
  // Displaying DSF's help screen if required
  if(isset($arguments['h']) || isset($arguments['help']) || count($arguments) == 0)
  {
    cecho("Usage: dmt [OPTIONS]\n\n\n", 'WHITE');
    cecho("Usage examples: \n", 'WHITE');
    cecho("    Synchronizing all datasets: dmt -s\n", 'WHITE');
    cecho("    Synchronizing a single dataset: dmt -s --config-id=\"My-Dataset-Id-From-Sync.ini\"\n", 'WHITE');
    cecho("    Deleting a dataset: dmt -d --uri=\"http://.../uri/of/record/to/delete/\" --osf-web-services=\"http://osf-web-services-instance.com/ws/\"\n", 'WHITE');
    cecho("    Creating an empty dataset: dmt --title=\"Foo\" -n --uri=\"http://.../uri/of/record/to/delete/\" --osf-web-services=\"http://osf-web-services-instance.com/ws/\"\n", 'WHITE');
    cecho("    List existing datasets: dmt -l --osf-web-services=\"http://osf-web-services-instance.com/ws/\"\n", 'WHITE');
    cecho("Options:\n", 'WHITE');
    cecho("-s                                    Synchronize all the datasets listed in dmt.ini\n", 'WHITE');
    cecho("-n                                    Create a new empty dataset\n", 'WHITE');
    cecho("-d                                    Delete an existing dataset\n", 'WHITE');
    cecho("-l                                    List all the accessible datasets\n", 'WHITE');
    cecho("-e                                    Export a dataset\n", 'WHITE');
    cecho("-h, --help                            Show this help section\n\n", 'WHITE');
    cecho("Dataset Creation Options:\n", 'WHITE');
    cecho("--osf-web-services=\"[URL]\"                   (required) Target OSF Web Services endpoints URL.\n", 'WHITE');
    cecho("                                                 Example: 'http://localhost/ws/'\n", 'WHITE');
    cecho("--uri=\"[URI]\"                         (required) URI of the dataset to create\n", 'WHITE');
    cecho("--title=\"[TITLE]\"                     (required) Title of the new dataset\n", 'WHITE');
    cecho("--group=\"[URI]\"                       (required) URI of the first group that will have access to this dataset\n", 'WHITE');
    cecho("--creator=\"[URI]\"                     (optional) URI of the creator of this dataset\n", 'WHITE');
    cecho("--description=\"[DESCRIPTION]\"         (optional) Description of the new dataset\n", 'WHITE');
    cecho("--queryextension=\"[CLASS]\"            (optional) Class of the QueryExtension to use for creating this new dataset.\n", 'WHITE');
    cecho("                                                 The class should include the full namespace.'\n", 'WHITE');
    cecho("                                                 Example: 'StructuredDynamics\\osf\\framework\\MyQuerierExtension'\n", 'WHITE');
    cecho("Dataset Deletation Options:\n", 'WHITE');
    cecho("--osf-web-services=\"[URL]\"                   (required) Target OSF Web Services endpoints URL.\n", 'WHITE');
    cecho("                                                 Example: 'http://localhost/ws/'\n", 'WHITE');
    cecho("Dataset Export Options:\n", 'WHITE');
    cecho("--osf-web-services=\"[URL]\"                   (required) Target OSF Web Services endpoints URL.\n", 'WHITE');
    cecho("                                                 Example: 'http://localhost/ws/'\n", 'WHITE');
    cecho("--file=\"[FILE]\"                       (required) File where to export the dataset.\n", 'WHITE');
    cecho("                                                 Example: '/tmp/my_exported_dataset.rdf'\n", 'WHITE');
    cecho("--mime=\"[URL]\"                        (optional) Specify the export format; One of:\n", 'WHITE');
    cecho("                                                 (a) application/rdf+xml (default)'\n", 'WHITE');
    cecho("                                                 (b) application/rdf+n3'\n", 'WHITE');
    cecho("--uri=\"[URI]\"                         (optional) URI of the dataset to create\n\n", 'WHITE');
    cecho("Dataset Listing Options:\n", 'WHITE');
    cecho("--osf-web-services=\"[URL]\"                   (required) Target OSF Web Services endpoints URL.\n", 'WHITE');
    cecho("                                                 Example: 'http://localhost/ws/'\n", 'WHITE');
    cecho("Configuration File Options:\n", 'WHITE');
    cecho("-c [FILE]                             Specifies the configuration file to use. Can include the \n", 'WHITE');
    cecho("                                      full path. If the full path is not specified, the DSF \n", 'WHITE');
    cecho("                                      will try to find it from the current folder.\n", 'WHITE');
    cecho("--config-id=\"[ID]\"                    (optional) Dataset ID, within the target configuration file,\n", 'WHITE');
    cecho("                                                 to run for this query\n", 'WHITE');
    exit;
  }

  if(isset($arguments['n']))
  {
    // Make sure the required arguments are defined in the arguments
    if(empty($arguments['osf-web-services']))
    {
      cecho("Missing the --osf-web-services parameter for creating a new dataset.\n", 'RED');  
      exit;
    }

    if(empty($arguments['uri']))
    {
      cecho("Missing the --uri parameter for creating a new dataset.\n", 'RED');  
      exit;
    }

    if(empty($arguments['group']))
    {
      cecho("Missing the --group parameter for creating a new dataset.\n", 'RED');  
      exit;
    }

    if(empty($arguments['title']))
    {
      cecho("Missing the --title parameter for creating a new dataset.\n", 'RED');  
      exit;
    }
  }
  
  // Reading the INI file to synch all setuped datasets
  $setup = NULL;
  $syncFilePath = '';
  
  if(isset($arguments['c'])) 
  {
    if(file_exists($arguments['c']))
    {
      // The full path of the file is defined in the -c argument
      $setup = parse_ini_file($arguments['c'], TRUE);  
      $syncFilePath = $arguments['c'];
    }
    elseif(file_exists(getcwd().'/'.$arguments['c']))
    {
      // The full path of the config file is not defined in the -c argument,
      // This means that we try to load it from the local folder.
      $setup = parse_ini_file(getcwd().'/'.$arguments['c'], TRUE);  
      $syncFilePath = getcwd().'/'.$arguments['c'];
    }
    else
    {
      $syncFilePath = $arguments['c'];
    }
  }
  else
  {   
    // The -c argument is not defined, so we try to find the dmt.ini file from
    // the current directory
    $setup = parse_ini_file(getcwd()."/dmt.ini", TRUE);  
    $syncFilePath = getcwd()."/dmt.ini";
  }

  if(!$setup)
  {
    cecho('An error occured when we tried to parse the '.$syncFilePath.' file. Make sure it is parseable and try again.', 'GREEN');  
    exit;
  }
  
  // Create credentials array
  $credentials = array(
    'osf-web-services' => (isset($arguments['osf-web-services']) ? $arguments['osf-web-services'] : ''),
    'application-id' => $setup["credentials"]["application-id"],
    'api-key' => $setup["credentials"]["api-key"],
    'user' => $setup["credentials"]["user"],
  );
  
 
  // Initiliaze needed resources to run this script
  ini_set("display_errors", "On");
  ini_set("memory_limit", $setup["config"]["memory"]."M");
  set_time_limit(65535);
  
  $osfWebServicesFolder = rtrim($setup["config"]["osfWebServicesFolder"], "/");
  
  include_once($osfWebServicesFolder."/StructuredDynamics/SplClassLoader.php");   

  // The user want to list all the accessible datasets
  if(isset($arguments['l']))
  {
    // Make sure the required arguments are defined in the arguments
    if(empty($arguments['osf-web-services']))
    {
      cecho("Missing the --osf-web-services parameter for listing accessible datasets.\n", 'RED');  
      exit;
    }    
    
    include_once('inc/getDatasets.php');
    
    $datasets = getDatasets($credentials);
    
    showDatasets($datasets);        
    
    exit;
  }  

  // The user want to delete a dataset
  if(isset($arguments['d']))
  {
    // Make sure the required arguments are defined in the arguments
    if(empty($arguments['osf-web-services']))
    {
      cecho("Missing the --osf-web-services parameter for deleting the dataset.\n", 'RED');  
      
      exit;
    } 

    include_once('inc/deleteDataset.php');
    
    if(isset($arguments['uri']) && $arguments['uri'] != '')
    {   
      cecho("Deleting dataset: ".$arguments['uri']."\n", 'CYAN');
      
      $deleted = deleteDataset($arguments['uri'], $credentials);  
    }
    else
    {
      // Show the list of accessible datasets
      include_once('inc/getDatasets.php');

      $datasets = getDatasets($credentials);
      
      showDatasets($datasets);  
      
      $datasetNum = getInput('Which dataset number would you like to delete?');
      
      $nb = 0;
      $yes = FALSE;
      $dataset = NULL;
      
      foreach($datasets as $key => $dset)
      {
        $nb++;
        if($nb == $datasetNum)
        {
          $yes = getInput('Are you sure you want to delete the '.$datasets[$key]['label'].'?');
          $dataset = $datasets[$key];
          break;
        }
      }
      
      $yes = filter_var($yes, FILTER_VALIDATE_BOOLEAN, array('flags' => FILTER_NULL_ON_FAILURE));
      if($yes === NULL)
      {
        $yes = FALSE;
      }      
      
      if($yes)
      {
        cecho("Deleting dataset: ".$dataset['label']."\n", 'CYAN');
        
        $deleted = deleteDataset($dataset['uri'], $credentials);          
      }
    }    
    
    exit;
  } 
  
  // The user want to export a dataset
  if(isset($arguments['e']))
  {
    // Make sure the required arguments are defined in the arguments
    if(empty($arguments['osf-web-services']))
    {
      cecho("Missing the --osf-web-services parameter for exporting the dataset.\n", 'RED');  
      
      exit;
    } 
    
    if(empty($arguments['file']))
    {
      cecho("Missing the --file parameter for exporting the dataset.\n", 'RED');  
      
      exit;
    }
    else
    {
      // Make sure the file is writable
      if(!is_writable(dirname($arguments['file'])))
      {
        cecho("The file specified in the --file parameter is not writable by the DMT tool.\n", 'RED');  
        
        exit;
      }
    }  
    
    $mime = 'application/rdf+xml';   
    
    if(!empty($arguments['mime']))
    {
      // Make sure the mime is supported
      
      if($arguments['mime'] != 'application/rdf+xml' &&
         $arguments['mime'] != 'application/rdf+n3')
      {
        cecho("The specified mime type is unsupported.\n", 'RED');  
        
        exit;
      }
      else
      {
        $mime = $arguments['mime'];
      }
    }

    include_once('inc/exportDataset.php');
    
    if(isset($arguments['uri']) && $arguments['uri'] != '')
    {   
      cecho("Exporting dataset: ".$arguments['uri']."\n", 'CYAN');
      
      $deleted = exportDataset($arguments['uri'], $credentials, $arguments['file'], $mime);  
    }
    else
    {
      // Show the list of accessible datasets
      include_once('inc/getDatasets.php');

      $datasets = getDatasets($credentials);
      
      showDatasets($datasets);  
      
      $datasetNum = getInput('Which dataset number would you like to export?');
      
      $nb = 0;
      $dataset = NULL;
      
      foreach($datasets as $key => $dset)
      {
        $nb++;
        if($nb == $datasetNum)
        {
          $dataset = $datasets[$key];
          break;
        }
      }
      
      cecho("Exporting dataset: ".$dataset['label']."\n", 'CYAN');
        
      $exported = exportDataset($dataset['uri'], $credentials, $arguments['file'], $mime);          
    }    
    
    exit;
  }

  // We synchronize a series of dataset defined in a synchronization configuration file
  if(isset($arguments['s']))
  {
    foreach($setup as $datasetName => $dataset)
    {
      if(isset($arguments['config-id']) && $arguments['config-id'] != $datasetName) 
      {
        continue;
      }
      
      if($datasetName != "config" && $datasetName != "credentials")                                 
      {
        $datasetName = preg_replace("/[^a-zA-Z0-9\-\s]/", "_", $datasetName);
        $files = array();
        $modifiedFiles = array(); // added or modified files
        $hashIndexFile = $setup["config"]["indexesFolder"].$datasetName."hashIndex.md5";
        $filesHash = array();
        $updateFiles = array(); // array of paths+files to update
        $hashFile = "";
        $filesUpdated = array();

        // Read the hashIndex file to check if files have been modified
        
        /*
           The hash table file has this format:
           
           /local/file/path/:md5
           
        */
        $hashIndex = @file_get_contents($hashIndexFile);
        
        if($hashIndex)
        {
          $hashIndex = explode("\n", $hashIndex);
          
          foreach($hashIndex as $hashRow)
          {
            $hash = explode(":", $hashRow);
            if($hash[0] != "" && $hash[1] != "")
            {
              $filesHash[$hash[0]] = $hash[1];
            }
          }
          
          // Free memory of the hash index
          $hashIndex = NULL;
        }

        // Get all the path+files within all directories of the dataset folder
        readDirectory($dataset["datasetLocalPath"], $files);
        
        // Check for a filtering pattern.
        if(isset($dataset["filteredFilesRegex"]))
        {
          foreach($files as $f)
          {
            $file = $f[0];
            
            if(preg_match("/".$dataset["filteredFilesRegex"]."/", $f[1]) > 0)
            {
              $modified = FALSE;
              
              // Check if the file is new
              if(isset($filesHash[$file]))
              {
                // Check if the file as been modified
                if(md5_file($file) != $filesHash[$file])
                {
                  $modified = TRUE;
                  
                  // Update the hash table that we will re-write later
                  $filesHash[$file] = md5_file($file);
                }
              }
              else
              {
                // New file
                $modified = TRUE;
                
                // Update the hash table that we will re-write later
                $filesHash[$file] = md5_file($file);
              }
              
              // Mark as modified if forceReloadSolrIndex or forceReload
              // is specified for this dataset
              if(strtolower($dataset["forceReload"]) == "true" ||
                 strtolower($dataset["forceReloadSolrIndex"]) == "true" )
              {
                $modified = TRUE;             
              }
              
              // If the file as been added/modified, we re-index in the OSF Web Services
              if($modified)
              {
                // Check for a date-stamp that we will use for sorting purposes.              
                preg_match("/\.(.*)\.rdf\.xml/", $f[1], $matches);
                
                $key = -1;
                
                if(count($matches) > 0)
                {
                  $key = preg_replace("/[^0-9]*/", "", $matches[1]);
                }
                
                if($key != -1)
                {
                  $updateFiles[$key] = $file;
                }
                else
                {
                  array_push($updateFiles, $file);
                }
              }            
            }
          }
        }
        else
        {
          // Get possible filters                              
          $filteredFiles = explode(";", $dataset["filteredFiles"]);

          foreach($files as $f)
          {
            $file = $f[0];
            
            if(is_array($filteredFiles) && array_search($f[1], $filteredFiles) === FALSE)
            {
              continue;
            }
            
            $modified = FALSE;
            
            // Check if the file is new
            if(isset($filesHash[$file]))
            {
              // Check if the file as been modified
              if(md5_file($file) != $filesHash[$file])
              {
                $modified = TRUE;
                
                // Update the hash table that we will re-write later
                $filesHash[$file] = md5_file($file);
              }
            }
            else
            {
              // New file
              $modified = TRUE;
              
              // Update the hash table that we will re-write later
              $filesHash[$file] = md5_file($file);
            }
            
            // Mark as modified if forceReloadSolrIndex or forceReload
            // is specified for this dataset
            if((isset($dataset["forceReload"]) && strtolower($dataset["forceReload"]) == "true") ||
               (isset($dataset["forceReloadSolrIndex"]) && strtolower($dataset["forceReloadSolrIndex"])) == "true")
            {
              $modified = TRUE;             
            }
            
            // If the file as been added/modified, we re-index in the OSF Web Services
            if($modified)
            {
              array_push($updateFiles, $file);
            }
          }        
        }
        
        // Order files by their timestamp; if not available, then this step doesn't matter
        ksort($updateFiles, SORT_NUMERIC);

        // Lets re-write the hash index
        foreach($filesHash as $filePath => $md5)
        {
          $hashFile .= $filePath.":".$md5."\n";
        }

        // Update all added/modified files
        if(count($updateFiles) > 0)
        {
          include_once($dataset["converterPath"].$dataset["converterScript"]);
          
          $nb = 0;
          foreach($updateFiles as $key => $updateFile)
          {
            // Propagate the global setting to the dataset's settings.
            $setup[$datasetName]["osfWebServicesFolder"] = $setup["config"]["osfWebServicesFolder"];
            $setup[$datasetName]["ontologiesStructureFiles"] = $setup["config"]["ontologiesStructureFiles"];
            $setup[$datasetName]["missingVocabulary"] = $setup["config"]["missingVocabulary"];
            $setup[$datasetName]['credentials'] = $setup["credentials"];
            
            if($nb > 0)
            {
              $dataset['forceReload'] = 'false';
              $dataset['forceReloadSolrIndex'] = 'false';
            }
            
            // This is needed in case of name collision; Namespaces are only supported in PHP 6
            call_user_func($dataset["converterFunctionName"], $updateFile, $dataset, $setup[$datasetName]);
            
            cecho("File updated: $updateFile\n", 'GREEN');  
            $nb++;
          }
        }
        
        // save the new hash index file
        file_put_contents($hashIndexFile, $hashFile);
      }
    }
  }

  if(isset($arguments['n']))
  {
    // We are creating a new empty dataset
    $datasetCreate = new DatasetCreateQuery($arguments['osf-web-services'], $credentials['application-id'], $credentials['api-key'], $credentials['user']);
    
    $datasetCreate->creator((isset($arguments['creator']) ? $arguments['creator'] : ''))
                  ->uri($arguments['uri'])
                  ->description((isset($arguments['description']) ? $arguments['description'] : ''))
                  ->title((isset($arguments['title']) ? $arguments['title'] : ''))
                  ->send((isset($arguments['queryextension']) ? new $arguments['queryextension'] : NULL));
                  
    if(!$datasetCreate->isSuccessful())
    {
      $debugFile = md5(microtime()).'.error';
      file_put_contents('/tmp/'.$debugFile, var_export($datasetCreate, TRUE));
           
      @cecho('Can\'t create the new dataset. '. $datasetCreate->getStatusMessage() . 
           $datasetCreate->getStatusMessageDescription()."\nDebug file: /tmp/$debugFile\n", 'RED');
           
      exit(1);        
    } 

    // Create the initial access permissions for the input group
    
    // Get the list of registered web services
    $authLister = new AuthListerQuery($arguments['osf-web-services'], $credentials['application-id'], $credentials['api-key'], $credentials['user']);
    
    $authLister->getRegisteredWebServiceEndpointsUri()
               ->mime('resultset')
               ->send((isset($arguments['queryextension']) ? new $arguments['queryextension'] : NULL));
    
    if(!$authLister->isSuccessful())      
    {
      $debugFile = md5(microtime()).'.error';
      file_put_contents('/tmp/'.$debugFile, var_export($authLister, TRUE));
           
      @cecho('Can\'t get the list of registered web services to create the permissions for: '.$arguments['uri'].'. '. $authLister->getStatusMessage() . 
           $authLister->getStatusMessageDescription()."\nDebug file: /tmp/$debugFile\n", 'RED');
      
      exit(1);
    } 
    
    $webservices = array();
    
    $resultset = $authLister->getResultset()->getResultset();
    
    foreach($resultset['unspecified'] as $list)
    {
      foreach($list['http://www.w3.org/1999/02/22-rdf-syntax-ns#li'] as $ws)
      {
        $webservices[] = $ws['uri'];
      }
    }
    
    // Register the credentials      
    $authRegistrarAccess = new AuthRegistrarAccessQuery($arguments['osf-web-services'], $credentials['application-id'], $credentials['api-key'], $credentials['user']);
    
    $crudPermissions = new CRUDPermission(TRUE, TRUE, TRUE, TRUE);
    
    $authRegistrarAccess->create($arguments['group'], $arguments['uri'], $crudPermissions, $webservices)
                        ->send((isset($arguments['queryextension']) ? new $arguments['queryextension'] : NULL));
    
    if(!$authRegistrarAccess->isSuccessful())      
    {
      $debugFile = md5(microtime()).'.error';
      file_put_contents('/tmp/'.$debugFile, var_export($authRegistrarAccess, TRUE));
           
      @cecho('Can\'t create permissions for this new dataset: '.$arguments['uri'].'. '. $authRegistrarAccess->getStatusMessage() . 
           $authRegistrarAccess->getStatusMessageDescription()."\nDebug file: /tmp/$debugFile\n", 'RED');
           
      exit(1);
    }    
    
    cecho("Dataset successfully created!\n", 'BLUE');
    
    exit;
  }

  function readDirectory($path, &$files)
  {
    $h = opendir($path);
    
    if($h)
    {
      while ($file = readdir($h)) 
      {
        if($file != "." && $file != ".." && strpos($file, "converted") === FALSE)
        {
          array_push($files, array($path."$file", $file));
        }
      }
    
      closedir($h);
    }    
  }

?>